/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}

class AnimationBuilder {
  #items = [];

  /**
   * Play the animation on a `? extends IRenderable & IRendererController` instance.
   * @param rdInstance The `? extends IRenderable & IRendererController` instance.
   */
  playOnCar(rdInstance) {
    for (const i of this.#items) {
      i.onRegister(rdInstance);
    }
    const itemsClone = [...this.#items];
    itemsClone.sort((a, b) => a.startFrame - b.startFrame);
    rdInstance.onUpdate(frame => {
      for (const i of itemsClone) {
        // Now hold on.
        // This is a very simple algorithm.
        // If you can't understand it, you are just fool.
        // If you can understand it, you are fool, too.
        //                                      ---- 27Onion
        if (i.length !== -1) {
          if (frame >= i.startFrame + i.length) {
            // Out-dated.
            continue;
          }
        }
        if (frame < i.startFrame) {
          // You are not old enough to join this *activity*, bro
          break;
        }

        // M⚡️U⚡️L⚡️T⚡️I⚡️P⚡️L⚡️A⚡️Y⚡️E⚡️R⚡️-⚡️S⚡️P⚡️O⚡️R⚡️T⚡️S
        i.onDrawFrame(frame - i.startFrame, this);
      }
    });
  }

  /**
   * Add an animation builder iteme
   * @param builderItem The builder item.
   * @returns The reference to the builder itself.
   */
  addItem(builderItem) {
    this.#items.push(builderItem);
    return this;
  }
}

class SoundBuilder {
  #audioToPlay = [];
  playOnCar(rdInstance) {
    rdInstance.onUpdate(curFrame => {
      this.#audioToPlay.forEach(audio => {
        if (curFrame === audio.startFrame) {
          audio.audio.play();
        } else if (curFrame === audio.startFrame + audio.length && audio.length !== null) {
          console.log("pause!");
          audio.audio.pause();
        }
      });
    });
  }
  addRadio(sound) {
    this.#audioToPlay.push(sound);
  }
}

class Core {
  #ele; // The html element of canvas.
  #objects = []; // The objects of animation.
  #every = []; // Do it for every frame.
  #start; // Do it before the animation started.
  #fps = 0; // The FPS.
  #frameImmediately = 0; // Current number of frames.
  #ctx = null; // The context of canvas.
  // eslint-disable-next-line @typescript-eslint/no-inferrable-types
  isSuspend = false; // The animation is or isnot suspend;

  /**
   * Create a animation of newcar.
   * @param ele The element of canvas.
   * @param fps The FPS of the animation.
   */
  constructor(ele, fps) {
    this.#ele = ele;
    if (this.#ele.getContext) {
      this.#fps = fps;
      this.#ctx = this.#ele.getContext("2d");
    }
    return this;
  }

  /**
   * Set this.#every
   * @param command the fuction.
   */
  onUpdate(command) {
    this.#every?.push(command);
    return this;
  }

  /**
   * Set this.#start
   * @param command The function.
   */
  forStart(command) {
    this.#start = command;
    return this;
  }
  suspend(frame) {
    if (typeof frame !== "undefined") this.#frameImmediately = frame;
    this.isSuspend = true;
  }
  continue(frame) {
    if (typeof frame !== "undefined") this.#frameImmediately = frame;
    this.isSuspend = false;
  }

  /**
   * Start draw every frame.
   */
  startFrame() {
    // this.#frameImmediately = 0;
    if (this.#ctx === null) return;
    this.#start && this.#start();
    // eslint-disable-next-line no-constant-condition
    const draw = (children, father) => {
      children.forEach(child => {
        const oldX = child.x;
        const oldY = child.y;
        // const oldRotationCenterX = child.rotationCenterX;
        // const oldRotationCenterY = child.rotationCenterY;
        if (typeof father === "undefined") {
          child.onUpdate(this.#ctx);
        } else {
          child.x += father.x;
          child.y += father.y;
          // child.rotationCenterX += father.x;
          // child.rotationCenterY += father.y;
          child.onUpdate(this.#ctx);
        }
        draw(child.children, child);
        child.x = oldX;
        child.y = oldY;
        // child.rotationCenterX = oldRotationCenterX;
        // child.rotationCenterY = oldRotationCenterY;
      });
    };

    setInterval(() => {
      this.#ctx?.clearRect(0, 0, this.#ele.width, this.#ele.height);
      // console.log(this.#frameImmediately, this.isSuspend);
      if (!this.isSuspend) {
        this.#frameImmediately += 1;
      }
      this.#every?.forEach(each => {
        each && each(this.#frameImmediately);
      });
      draw(this.#objects);
    }, 1000 / this.#fps);
  }

  /**
   * Link the Car Object on the animation.
   * @param obj the Carobj Object.
   * Attention: the function only can link Car Object,which can't use animation builder.
   */
  linkObject(obj) {
    this.#objects.push(obj);
  }
}

class Carobj {
  display = true; // The Object is or isnot display.
  #x = 0;
  #y = 0;
  #rotation = 0;
  #scaleX = 1;
  #scaleY = 1;
  #contextX;
  #contextY;
  #children = [];
  #operation = "source-over";
  #rotationCenterX;
  #rotationCenterY;
  constructor(datas) {
    this.x = datas.x;
    this.y = datas.y;
    typeof datas.contextX !== "undefined" ? this.#contextX = datas.contextX : this.#contextX = this.#x;
    typeof datas.contextY !== "undefined" ? this.#contextY = datas.contextY : this.#contextY = this.#y;
    typeof datas.scaleX !== "undefined" ? this.#scaleX = datas.scaleX : null;
    typeof datas.scaleY !== "undefined" ? this.#scaleY = datas.scaleY : null;
    typeof datas.display !== "undefined" ? this.display = datas.display : null;
    typeof datas.rotation !== "undefined" ? this.#rotation = datas.rotation : null;
    typeof datas.operation !== "undefined" ? this.#operation = datas.operation : null;
    typeof datas.children !== "undefined" ? this.#children = datas.children : null;
    typeof datas.rotationCenterX !== "undefined" ? this.#rotationCenterX = datas.rotationCenterX : this.#rotationCenterX = this.#x;
    typeof datas.rotationCenterY !== "undefined" ? this.#rotationCenterY = datas.rotationCenterY : this.#rotationCenterY = this.#y;
  }

  /**
   * Get called on each frame.
   * @param ctx The context instance of the canvas object.
   */
  onDraw(ctx) {
    return ctx;
  }

  /**
   * Actually get called on each frame. The difference to `onDraw()` is that `onDraw()` is used for inherited classes to implement their render while this will be actually called directly on each frame.
   * We will do some transformation on this frame.
   * @param ctx The context instance.
   */
  onUpdate(ctx) {
    if (this.display === true) {
      ctx.save();
      ctx.translate(this.#rotationCenterX, this.#rotationCenterY);
      console.log(this.#rotationCenterX, this.#x, this.#rotationCenterY, this.#y);
      // ctx.translate(this.#x, this.#y);
      ctx.rotate(this.#rotation);
      ctx.scale(this.#scaleX, this.#scaleY);
      ctx.globalCompositeOperation = this.#operation;
      this.onDraw(ctx);
      ctx.restore();
    }
  }

  /**
   * Set the display to false.
   */
  hide() {
    this.display = false;
  }

  /**
   * Set the display to true.
   */
  appear() {
    this.display = true;
  }
  setContextPosition(x, y) {
    this.#contextX = x;
    this.#contextY = y;
    return this;
  }
  addChild(...objects) {
    objects.forEach(obj => {
      this.#children.push(obj);
    });
  }

  /**
   * Each Carobjs has different sighs.Frame
   * @return The Carobj's type,one and only.
   */
  get sigh() {
    return "CarObject";
  }
  get children() {
    return this.#children;
  }
  get x() {
    return this.#x;
  }
  set x(value) {
    this.#x = value;
    this.#rotationCenterX = value;
  }
  get y() {
    return this.#y;
  }
  set y(value) {
    this.#y = value;
    this.#rotationCenterY = value;
  }
  set scaleX(value) {
    this.#scaleX = value;
  }
  get scaleX() {
    return this.#scaleX;
  }
  set scaleY(value) {
    this.#scaleY = value;
  }
  get scaleY() {
    return this.#scaleY;
  }
  get contextX() {
    return this.#contextX;
  }
  get contextY() {
    return this.#contextY;
  }

  /**
   * Return the rotation of the component, in radians.
   */
  get rotation() {
    return this.#rotation;
  }

  /**
   * Set the rotation of the component. Remember, the value is in radians (which 2*pi == 360deg).
   */
  set rotation(value) {
    this.#rotation = value;
  }
  get operation() {
    return this.#operation;
  }
  set operation(value) {
    this.#operation = value;
  }
}

class Text extends Carobj {
  #text;
  #size;
  #color;
  #fontFamily = "sans-serif";
  #align = "start";
  #baseline = "middle";
  constructor(datas) {
    super(datas);
    this.#text = datas.text;
    this.x = datas.x;
    this.y = datas.y;
    typeof datas.size === "undefined" ? this.#size = 10 : this.#size = datas.size;
    typeof datas.color === "undefined" ? this.#color = "black" : this.#color = datas.color;
    if (typeof datas.fontFamily !== "undefined") this.fontFamily = datas.fontFamily;
    if (typeof datas.align !== "undefined") this.#align = datas.align;
    if (typeof datas.baseline !== "undefined") this.#baseline = datas.baseline;
  }
  onDraw(ctx) {
    super.onDraw(ctx);
    ctx.font = `${this.#size}px ${this.#fontFamily}`;
    // console.log(this.#size, this.#fontFamily);
    // console.log(`${this.#size}px ${this.#fontFamily}`);
    ctx.textAlign = this.#align;
    ctx.textBaseline = this.#baseline;
    ctx.fillStyle = this.#color;
    ctx.fillText(this.#text, 0, 0);
    return ctx;
  }
  get color() {
    return this.#color;
  }
  set color(value) {
    this.#color = value;
  }
  get fontFamily() {
    return this.#fontFamily;
  }
  set fontFamily(value) {
    this.#fontFamily = value;
  }
  get align() {
    return this.#align;
  }
  set align(value) {
    this.#align = value;
  }
  get baseline() {
    return this.#baseline;
  }
  set baseline(value) {
    this.#baseline = value;
  }
  get text() {
    return this.#text;
  }
  set text(value) {
    this.#text = value;
  }
  get size() {
    return this.#size;
  }
  set size(value) {
    this.#size = value;
  }
  get sigh() {
    return "Text";
  }
}

class Spirit extends Carobj {
  /**
   * You can set different types of status,the spirit only display one of all until you change it.
   */

  #status = []; // The status of the carobj, default by the first.
  #statusNow = 0; // Current status.

  constructor(datas) {
    super(datas);
    this.x = datas.x;
    this.y = datas.y;
  }

  /**
   * Delete one of status.
   * @param index The index of the status.
   */
  deleteStatus(index) {
    delete this.#status[index];
  }

  /**
   * Set the status.
   * @param dis[0] The image of all status.
   * @param dis[1] The index of all status,Non-required.
   */
  setStatus(dis, index) {
    if (typeof index === "undefined") {
      this.#status.push(dis);
    } else {
      this.#status[index] = dis;
    }
  }
  onDraw(ctx) {
    super.onDraw(ctx);
    ctx.drawImage(this.#status[this.#statusNow], 0, 0);
    return ctx;
  }
  set status(value) {
    this.#statusNow = value;
    // console.log(`Change to ${this.#statusNow}`);
  }

  get status() {
    return this.#statusNow;
  }
  get length() {
    return this.#status.length;
  }
  get sigh() {
    return "Spirit";
  }
}

class Point extends Carobj {
  constructor(datas) {
    super(datas);
    this.x = datas.x;
    this.y = datas.y;
  }
  onDraw(ctx) {
    super.onDraw(ctx);
    return ctx;
  }
}

class Line extends Carobj {
  #startPoint;
  #endPoint;
  // eslint-disable-next-line @typescript-eslint/no-inferrable-types
  #color = "black";
  // eslint-disable-next-line @typescript-eslint/no-inferrable-types
  #width = 1;
  constructor(datas) {
    super(datas);
    this.#startPoint = datas.startPoint;
    this.#endPoint = datas.endPoint;
    if (typeof datas.color !== "undefined") this.#color = datas.color;
    if (typeof datas.width !== "undefined") this.#width = datas.width;
  }
  onDraw(ctx) {
    super.onDraw(ctx);
    ctx.beginPath();
    ctx.strokeStyle = `${this.#color}`;
    ctx.lineWidth = this.#width;
    ctx.moveTo(this.primaryPoints[0].x, this.primaryPoints[0].y);
    ctx.lineTo(this.primaryPoints[1].x, this.primaryPoints[1].y);
    ctx.stroke();
    return ctx;
  }
  get primaryPoints() {
    return [this.#startPoint, this.#endPoint];
  }
  set startX(value) {
    this.#startPoint.x = value;
  }
  set startY(value) {
    this.#startPoint.y = value;
  }
  set endX(value) {
    this.#endPoint.x = value;
  }
  set endY(value) {
    this.#endPoint.y = value;
  }
}

class MathImage extends Carobj {
  #imageFunction;
  #startVariable;
  #endVariable;
  constructor(datas) {
    super(datas);
    this.#imageFunction = datas.f;
    this.#startVariable = datas.start;
    this.#endVariable = datas.end;
  }
  onDraw(ctx) {
    super.onDraw(ctx);
    ctx.beginPath();
    ctx.moveTo(this.#startVariable, this.#imageFunction(this.#startVariable));
    let variable = this.#startVariable;
    for (variable; variable <= this.#endVariable; variable += 1) {
      ctx.lineTo(variable, this.#imageFunction(variable));
    }
    ctx.stroke();
    return ctx;
  }
  get startVariable() {
    return this.#startVariable;
  }
  set startVariable(value) {
    this.#startVariable = value;
  }
  get endVariable() {
    return this.#endVariable;
  }
  set endVariable(value) {
    this.#endVariable = value;
  }
}

/* eslint-disable @typescript-eslint/no-inferrable-types */
class Circle extends Carobj {
  #radius;
  #startAngle;
  #endAngle;
  #borderColor = "black";
  #fillColor = null;
  constructor(datas) {
    super(datas);
    this.#radius = datas.radius;
    this.x = datas.x;
    this.y = datas.y;
    typeof datas.startAngle === "undefined" ? this.#startAngle = 0 : this.#startAngle = datas.startAngle;
    typeof datas.endAngle === "undefined" ? this.#endAngle = 2 * Math.PI : this.#endAngle = datas.startAngle;
    if (typeof datas.borderColor !== "undefined") this.#borderColor = datas.borderColor;
    if (typeof datas.fillColor !== "undefined") this.#fillColor = datas.fillColor;
  }
  onDraw(ctx) {
    super.onDraw(ctx);
    ctx.moveTo(this.contextX, this.contextY);
    ctx.beginPath();
    ctx.arc(0, 0, this.#radius, this.#startAngle, this.#endAngle);
    if (this.#fillColor !== null) {
      ctx.fillStyle = this.#fillColor;
      ctx.fill();
    }
    ctx.strokeStyle = this.#borderColor;
    ctx.stroke();
    return ctx;
  }
  get startAngle() {
    return this.#startAngle;
  }
  set startAngle(value) {
    this.#startAngle = value;
  }
  get endAngle() {
    return this.#endAngle;
  }
  set endAngle(value) {
    this.#endAngle = value;
  }
}

class Polygon extends Carobj {
  #points = [];
  // eslint-disable-next-line @typescript-eslint/no-inferrable-types
  #borderColor = "black";
  // eslint-disable-next-line @typescript-eslint/no-inferrable-types
  #borderWidth = 1;
  #fillColor = null;
  constructor(datas) {
    super(datas);
    this.#points = datas.points;
    if (typeof datas.borderColor !== "undefined") this.#borderColor = datas.borderColor;
    if (typeof datas.fillColor !== "undefined") this.#fillColor = datas.fillColor;
    if (typeof datas.borderWidth !== "undefined") this.#borderWidth = datas.borderWidth;
  }
  onDraw(ctx) {
    ctx.lineWidth = this.#borderWidth;
    ctx.strokeStyle = `${this.#borderColor}`;
    if (this.#fillColor !== null) {
      ctx.fillStyle = `${this.#fillColor}`;
    }
    ctx.moveTo(this.#points[0].x, this.#points[0].y);
    ctx.beginPath();
    this.#points.forEach(point => {
      ctx.lineTo(point.x, point.y);
    });
    ctx.lineTo(this.#points[0].x, this.#points[0].y);
    ctx.stroke();
    return ctx;
  }
}

const object = (exports => {
  exports.Carobj = Carobj;
  exports.Text = Text;
  exports.Spirit = Spirit;
  exports.Point = Point;
  exports.Line = Line;
  exports.MathImage = MathImage;
  exports.Circle = Circle;
  exports.Polygon = Polygon;
  return exports;
})({});

class AnimationBuilderItem {
  /**
   * Will be called on registration.
   * @param parent The parent object.
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  onRegister(_carInstance) {
    return;
  }

  /**
   * Will be called on drawing frame.
   * @param relativeFrameCount The frame count relative to `fstart`.
   */
}

/**
 * The interpolator class.
 */
class Interpolator {
  #startValue;
  #endValue;
  #interpolator;

  /**
   * To construct an interpolator.
   * @param startValue The start value of it.
   * @param endValue The end value of it.
   * @param interpolationFunction The interpolation function, which receives a real number between 0 and 1 (representing the progress of time) and returns a number between 0 and 1 to represent the progress of the resulting value. The closer to 1 the return value is, the closer to `endValue` the interpolate value will be, otherwise the interpolated value will be closer to `startValue`.
   */
  constructor(startValue, endValue, interpolationFunction) {
    this.#startValue = startValue;
    this.#endValue = endValue;
    this.#interpolator = interpolationFunction;
  }

  /**
   * Calculate the interpolation with the given progress number.
   * @param n The progress, between 0 and 1
   * @returns The interpolation.
   */
  interpolate(n) {
    return this.#startValue + this.#interpolator(n) * (this.#endValue - this.#startValue);
  }
}

const LinearInterpolator = x => x;

/* eslint-disable @typescript-eslint/no-unused-vars */
class Translation extends AnimationBuilderItem {
  #datas;
  constructor(datas) {
    super();
    let flag = "";
    if ((flag = "startAt", datas.startAt === undefined) || (flag = "lastsFor", datas.lastsFor === undefined) || (flag = "to", datas.to === undefined) || (flag = "bindTo", datas.bindTo === undefined)) throw new Error(`be unset data "${flag}"`);
    datas.from = datas.from ?? [datas.bindTo.x, datas.bindTo.y];
    this.#datas = {
      length: datas.lastsFor ?? null,
      start: datas.startAt ?? null,
      obj: datas.bindTo ?? null,
      interpolatorx: new Interpolator(datas.from[0], datas.to[0], datas.by ?? LinearInterpolator),
      interpolatory: new Interpolator(datas.from[1], datas.to[1], datas.by ?? LinearInterpolator)
    };
  }
  get length() {
    return this.#datas.length;
  }
  get startFrame() {
    return this.#datas.start;
  }
  onDrawFrame(relativeFrameCount, parent) {
    this.#datas.obj.x = this.#datas.interpolatorx.interpolate((relativeFrameCount + 1) / this.#datas.length);
    this.#datas.obj.y = this.#datas.interpolatory.interpolate((relativeFrameCount + 1) / this.#datas.length);
  }
}

/* eslint-disable @typescript-eslint/no-unused-vars */
class Rotation extends AnimationBuilderItem {
  #datas;
  constructor(datas) {
    super();
    let flag = "";
    if ((flag = "startAt", datas.startAt === undefined) || (flag = "lastsFor", datas.lastsFor === undefined) || (flag = "to", datas.to === undefined) || (flag = "bindTo", datas.bindTo === undefined)) throw new Error(`be unset data "${flag}"`);
    datas.from = datas.from ?? datas.bindTo.rotation;
    this.#datas = {
      start: datas.startAt,
      obj: datas.bindTo,
      interpolator: new Interpolator(datas.from, datas.to, datas.by ?? LinearInterpolator),
      length: datas.lastsFor
    };
  }
  onDrawFrame(relativeFrameCount, _parent) {
    this.#datas.obj.rotation = this.#datas.interpolator.interpolate((relativeFrameCount + 1) / this.#datas.length);
  }
  get startFrame() {
    return this.#datas.start;
  }
  get length() {
    return this.#datas.length;
  }
}

/* eslint-disable @typescript-eslint/no-unused-vars */
class Scale extends AnimationBuilderItem {
  #datas;
  constructor(datas) {
    super();
    let flag = "";
    if ((flag = "startAt", datas.startAt === undefined) || (flag = "lastsFor", datas.lastsFor === undefined) || (flag = "to", datas.to === undefined) || (flag = "bindTo", datas.bindTo === undefined)) throw new Error(`be unset data "${flag}"`);
    datas.from = datas.from ?? [datas.bindTo.scaleX, datas.bindTo.scaleY];
    this.#datas = {
      obj: datas.bindTo,
      interpolatorx: new Interpolator(datas.from[0], datas.to[0], datas.by ?? LinearInterpolator),
      interpolatory: new Interpolator(datas.from[1], datas.to[1], datas.by ?? LinearInterpolator),
      length: datas.lastsFor,
      start: datas.startAt
    };
  }
  onDrawFrame(relativeFrameCount, _parent) {
    this.#datas.obj.scaleX = this.#datas.interpolatorx.interpolate((relativeFrameCount + 1) / this.#datas.length);
    this.#datas.obj.scaleY = this.#datas.interpolatory.interpolate((relativeFrameCount + 1) / this.#datas.length);
  }
  get startFrame() {
    return this.#datas.start;
  }
  get length() {
    return this.#datas.length;
  }
}

// TODO: Recreate the animation of changing status of spirits.
class ChangingStatus extends AnimationBuilderItem {
  #datas;
  constructor(datas) {
    super();
    let flag = "";
    if ((flag = "startAt", datas.startAt === undefined) || (flag = "lastsFor", datas.lastsFor === undefined) || (flag = "bindTo", datas.bindTo === undefined)) throw new Error(`be unset data "${flag}"`);
    this.#datas = {
      length: datas.lastsFor,
      start: datas.startAt,
      obj: datas.bindTo
    };
  }
  onDrawFrame(relativeFrameCount, _parent) {
    this.#datas.obj.status = relativeFrameCount % this.#datas.obj.length;
  }
  get startFrame() {
    return this.#datas.start;
  }
  get length() {
    return this.#datas.length;
  }
}

/* eslint-disable @typescript-eslint/no-unused-vars */
class Limit extends AnimationBuilderItem {
  #datas;
  constructor(datas) {
    super();
    let flag = "";
    if ((flag = "startAt", datas.startAt === undefined) || (flag = "lastsFor", datas.lastsFor === undefined) || (flag = "to", datas.to === undefined) || (flag = "bindTo", datas.bindTo === undefined)) throw new Error(`be unset data "${flag}"`);
    datas.from = datas.from ?? [datas.bindTo.startVariable, datas.bindTo.startVariable];
    this.#datas = {
      length: datas.lastsFor - datas.startAt,
      start: datas.startAt,
      obj: datas.bindTo,
      interpolatorstart: new Interpolator(datas.from[0], datas.to[0], datas.by ?? LinearInterpolator),
      interpolatorend: new Interpolator(datas.from[1], datas.to[1], datas.by ?? LinearInterpolator)
    };
  }
  onDrawFrame(relativeFrameCount, _parent) {
    this.#datas.obj.startVariable = this.#datas.interpolatorstart.interpolate((relativeFrameCount + 1) / this.#datas.length);
    this.#datas.obj.endVariable = this.#datas.interpolatorend.interpolate((relativeFrameCount + 1) / this.#datas.length);
  }
  get startFrame() {
    return this.#datas.start;
  }
  get length() {
    return this.#datas.length;
  }
}

class AngleCircle extends AnimationBuilderItem {
  #datas;
  constructor(datas) {
    super();
    let flag = "";
    if ((flag = "startAt", datas.startAt === undefined) || (flag = "lastsFor", datas.lastsFor === undefined) || (flag = "to", datas.to === undefined) || (flag = "bindTo", datas.bindTo === undefined)) throw new Error(`be unset data "${flag}"`);
    datas.from = datas.from ?? [datas.bindTo.startAngle, datas.bindTo.endAngle];
    this.#datas = {
      length: datas.lastsFor,
      start: datas.startAt,
      obj: datas.bindTo,
      interpolatorstart: new Interpolator(datas.from[0], datas.to[0], datas.by ?? LinearInterpolator),
      interpolatorend: new Interpolator(datas.from[1], datas.to[1], datas.by ?? LinearInterpolator)
    };
  }
  onDrawFrame(relativeFrameCount, parent) {
    this.#datas.obj.startAngle = this.#datas.interpolatorstart.interpolate((relativeFrameCount + 1) / this.#datas.length);
    this.#datas.obj.endAngle = this.#datas.interpolatorend.interpolate((relativeFrameCount + 1) / this.#datas.length);
  }
  get startFrame() {
    return this.#datas.start;
  }
  get length() {
    return this.#datas.length;
  }
}

class SingleFrameAction extends AnimationBuilderItem {
  #datas;
  constructor(datas) {
    super();
    let flag = "";
    if ((flag = "at", datas.at === undefined) || (flag = "func", datas.run === undefined)) throw new Error(`be unset data "${flag}"`);
    this.#datas = {
      frame: datas.at / 2,
      func: datas.run
    };
  }
  onDrawFrame(relativeFrameCount, _parent) {
    // console.log(relativeFrameCount);
    if (relativeFrameCount === this.#datas.frame) {
      this.#datas.func();
    }
  }
  get startFrame() {
    return this.#datas.frame;
  }
  get length() {
    return this.#datas.frame + 1;
  }
}

/* eslint-disable @typescript-eslint/no-unused-vars */
class MutateContent extends AnimationBuilderItem {
  #datas;
  constructor(datas) {
    super();
    let flag = "";
    if ((flag = "startAt", datas.startAt === undefined) || (flag = "bindTo", datas.bindTo === undefined) || (flag = "mutateContentTo", datas.mutateContentTo === undefined)) throw new Error(`be unset data "${flag}"`);
    this.#datas = {
      start: datas.startAt,
      textObject: datas.bindTo,
      mutateTo: datas.mutateContentTo
    };
  }
  onDrawFrame(_relativeFrameCount, _parent) {
    this.#datas.textObject.text = this.#datas.mutateTo;
  }
  get startFrame() {
    return this.#datas.start;
  }
  get length() {
    return 1;
  }
}

const animation = (exports => {
  exports.Translation = Translation;
  exports.Rotation = Rotation;
  exports.Scale = Scale;
  exports.ChangingStatus = ChangingStatus;
  exports.Limit = Limit;
  exports.AngleCircle = AngleCircle;
  exports.SingleFrameAction = SingleFrameAction;
  exports.MutateContent = MutateContent;
  exports.AnimationBuilderItem = AnimationBuilderItem;
  return exports;
})({});

/* eslint-disable indent */
function easeInSine(x) {
  return 1 - Math.cos(x * Math.PI / 2);
}
function easeOutSine(x) {
  return Math.sin(x * Math.PI / 2);
}
function easeInOutSine(x) {
  return -(Math.cos(Math.PI * x) - 1) / 2;
}
function easeInQuad(x) {
  return x * x;
}
function easeOutQuad(x) {
  return 1 - (1 - x) * (1 - x);
}
function easeInOutQuad(x) {
  return x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2;
}
function easeInCubic(x) {
  return x * x * x;
}
function easeOutCubic(x) {
  return 1 - Math.pow(1 - x, 3);
}
function easeInOutCubic(x) {
  return x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2;
}
function easeInQuart(x) {
  return x * x * x * x;
}
function easeOutQuart(x) {
  return 1 - Math.pow(1 - x, 4);
}
function easeInOutQuart(x) {
  return x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2;
}
function easeInQuint(x) {
  return x * x * x * x * x;
}
function easeOutQuint(x) {
  return 1 - Math.pow(1 - x, 5);
}
function easeInOutQuint(x) {
  return x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2;
}
function easeInExpo(x) {
  return x === 0 ? 0 : Math.pow(2, 10 * x - 10);
}
function easeOutExpo(x) {
  return x === 1 ? 1 : 1 - Math.pow(2, -10 * x);
}
function easeInOutExpo(x) {
  return x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? Math.pow(2, 20 * x - 10) / 2 : (2 - Math.pow(2, -20 * x + 10)) / 2;
}
function easeInCirc(x) {
  return 1 - Math.sqrt(1 - Math.pow(x, 2));
}
function easeOutCirc(x) {
  return Math.sqrt(1 - Math.pow(x - 1, 2));
}
function easeInOutCirc(x) {
  return x < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2;
}
function easeInBack(x) {
  const c1 = 1.70158;
  const c3 = c1 + 1;
  return c3 * x * x * x - c1 * x * x;
}
function easeOutBack(x) {
  const c1 = 1.70158;
  const c3 = c1 + 1;
  return 1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2);
}
function easeInOutBack(x) {
  const c1 = 1.70158;
  const c2 = c1 * 1.525;
  return x < 0.5 ? Math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2) / 2 : (Math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2;
}
function easeInElastic(x) {
  const c4 = 2 * Math.PI / 3;
  return x === 0 ? 0 : x === 1 ? 1 : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c4);
}
function easeOutElastic(x) {
  const c4 = 2 * Math.PI / 3;
  return x === 0 ? 0 : x === 1 ? 1 : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c4) + 1;
}
function easeInOutElastic(x) {
  const c5 = 2 * Math.PI / 4.5;
  return x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * c5)) / 2 : Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * c5) / 2 + 1;
}
function easeInBounce(x) {
  return 1 - easeOutBounce(1 - x);
}
function easeOutBounce(x) {
  const n1 = 7.5625;
  const d1 = 2.75;
  if (x < 1 / d1) {
    return n1 * x * x;
  } else if (x < 2 / d1) {
    return n1 * (x -= 1.5 / d1) * x + 0.75;
  } else if (x < 2.5 / d1) {
    return n1 * (x -= 2.25 / d1) * x + 0.9375;
  } else {
    return n1 * (x -= 2.625 / d1) * x + 0.984375;
  }
}
function easeInOutBounce(x) {
  return x < 0.5 ? (1 - easeOutBounce(1 - 2 * x)) / 2 : (1 + easeOutBounce(2 * x - 1)) / 2;
}

const interpolator = (exports => {
  exports.easeInBack = easeInBack;
  exports.easeInBounce = easeInBounce;
  exports.easeInCirc = easeInCirc;
  exports.easeInCubic = easeInCubic;
  exports.easeInElastic = easeInElastic;
  exports.easeInExpo = easeInExpo;
  exports.easeInOutBack = easeInOutBack;
  exports.easeInOutBounce = easeInOutBounce;
  exports.easeInOutCirc = easeInOutCirc;
  exports.easeInOutElastic = easeInOutElastic;
  exports.easeInOutCubic = easeInOutCubic;
  exports.easeInOutExpo = easeInOutExpo;
  exports.easeInOutQuad = easeInOutQuad;
  exports.easeInOutQuart = easeInOutQuart;
  exports.easeInOutQuint = easeInOutQuint;
  exports.easeInOutSine = easeInOutSine;
  exports.easeInQuad = easeInQuad;
  exports.easeInQuart = easeInQuart;
  exports.easeInQuint = easeInQuint;
  exports.easeInSine = easeInSine;
  exports.easeOutBack = easeOutBack;
  exports.easeOutBounce = easeOutBounce;
  exports.easeOutCirc = easeOutCirc;
  exports.easeOutCubic = easeOutCubic;
  exports.easeOutElastic = easeOutElastic;
  exports.easeOutExpo = easeOutExpo;
  exports.easeOutQuad = easeOutQuad;
  exports.easeOutQuart = easeOutQuart;
  exports.easeOutQuint = easeOutQuint;
  exports.easeOutSine = easeOutSine;
  exports.Linear = LinearInterpolator;
  return exports;
})({});

class Sound {
  #path = null;
  #startFrame = null;
  #length = null;
  #audio;
  // eslint-disable-next-line @typescript-eslint/no-inferrable-types
  #volume = 1;
  constructor(path, startFrame, endFrame) {
    this.#path = path;
    this.#startFrame = startFrame;
    endFrame !== undefined ? this.#length = endFrame - startFrame : null;
    this.#audio = new Audio(this.#path);
    this.#audio.volume = this.#volume;
  }
  get path() {
    return this.#path;
  }
  get length() {
    return this.#length;
  }
  get startFrame() {
    return this.#startFrame;
  }
  get audio() {
    return this.#audio;
  }
}

var _Car_animationBuilder, _Car_soundBuilder, _Car_core;
class Car {
  constructor(ele, fps) {
    _Car_animationBuilder.set(this, new AnimationBuilder());
    _Car_soundBuilder.set(this, new SoundBuilder());
    _Car_core.set(this, void 0);
    __classPrivateFieldSet(this, _Car_core, new Core(ele, fps), "f");
    return this;
  }
  addObject(obj) {
    __classPrivateFieldGet(this, _Car_core, "f").linkObject(obj);
    return this;
  }
  addAnimationItem(animationItem) {
    __classPrivateFieldGet(this, _Car_animationBuilder, "f").addItem(animationItem);
    return this;
  }
  addSoundItem(sound) {
    __classPrivateFieldGet(this, _Car_soundBuilder, "f").addRadio(sound);
    return this;
  }
  startPlay() {
    __classPrivateFieldGet(this, _Car_animationBuilder, "f").playOnCar(__classPrivateFieldGet(this, _Car_core, "f"));
    __classPrivateFieldGet(this, _Car_soundBuilder, "f").playOnCar(__classPrivateFieldGet(this, _Car_core, "f"));
    __classPrivateFieldGet(this, _Car_core, "f").startFrame();
  }
  onUpdate(command) {
    __classPrivateFieldGet(this, _Car_core, "f").onUpdate(command);
  }
  suspend(frame) {
    __classPrivateFieldGet(this, _Car_core, "f").suspend(frame);
  }
  continue(frame) {
    __classPrivateFieldGet(this, _Car_core, "f").continue(frame);
  }
}
_Car_animationBuilder = new WeakMap(), _Car_soundBuilder = new WeakMap(), _Car_core = new WeakMap();
window.onload = () => {
  console.log(`   ____  ___ _      ___________ ______
  / __ \\/ _ \\ | /| / / ___/ __  / ___/
 / / / /  __/ |/ |/ / /__/ /_/ / /    
/_/ /_/\\___/|__/|__/\\___/\\__,_/_/

%cThe animation is powered by %c newcar %c v0.2.0  %c

link: https://github.com/Bug-Duck/newcar
 `, "font-size: 14px", "background-color: orange; padding: 7px; font-size: 14px", "background-color: grey; padding: 7px; font-size: 14px");
};

export { Car, Sound, animation, interpolator, object };
//# sourceMappingURL=newcar.mjs.map
